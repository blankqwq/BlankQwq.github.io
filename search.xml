<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[每日单词笔记]]></title>
    <url>%2F2019%2F09%2F22%2F%E6%AF%8F%E6%97%A5%E5%8D%95%E8%AF%8D%E7%AC%94%E8%AE%B0%2F</url>
    <content type="text"><![CDATA[9.19 constitution 宪法 sencus 人口普查 conducted 进行 distributing 分布 federal 联邦的 purpose 目的 funds 基金 good stuff like that 像这样的好东西 booming蓬勃发展 compile 编译 predicted 预测 compute 计算 9.20 scale 规模 increase 增加 9.21 episode 插曲 symbol 符号 components 组成成分]]></content>
      <categories>
        <category>学习</category>
      </categories>
      <tags>
        <tag>English</tag>
        <tag>stduy</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[laravel-admin在laravel-admin下运行——记一次因为莽付出的代价]]></title>
    <url>%2F2019%2F09%2F22%2Flaravel-admin%E5%9C%A8laravel-admin%E4%B8%8B%E8%BF%90%E8%A1%8C%E2%80%94%E2%80%94%E8%AE%B0%E4%B8%80%E6%AC%A1%E5%9B%A0%E4%B8%BA%E8%8E%BD%E4%BB%98%E5%87%BA%E7%9A%84%E4%BB%A3%E4%BB%B7%2F</url>
    <content type="text"><![CDATA[初生牛犊不怕虎,直接莽上laravels 前因 我们公司一直都是采用 think3.2 ，虽然使用起来确实不错,但是哪能有 laravel 舒服 于是我才用 laravel ，但是经理觉得后台太慢了 我做了一部分优化还是慢，我太难了，之前他让我随便选框架 我就想到了大佬的 [laravels](https://github.com/hhxsv5/laravel-s) 心里想laravels+laravel-admin岂不是美哉，毕竟有swoole `以前学过一些，觉得应该可以把持住` 结果一使用出大问题 发现问题，问题介绍 第一个问题就是比较常见的，顶部的刷新无限增多，如图 第二个问题就是，删除这个却进入上一个进入的删除路由，导致各种删除失败 导出excel提示exit 4.Pjax中间件提示exit 目前比较真实的问题就是这么一些，具体其他问题请等待我后续的发现 解决问题，提供思路 授人以鱼不如授人以渔 我们先排查第一个问题，这个比较常见，其实就是我们的Admin实例并没有被清除，导致无限添加navBar 然后在 admin/bootstrap.php中每次都调用一下 于是我想到第一个办法，这个方法比较 憨批 ，因为当时认为这个实例重新创建应该挺麻烦，所以采用局部清理的方式 解决问题之后测试删除功能，又发现新的问题，也就是问题2 这个问题很明显是实例没清理干净，导致上一步生成的js下一步仍然存在，排除在控制器生成的可能，所以初步判断只有可能存在于\Encore\Admin\Admin实例中，因为这个实例是存在于容器中所以直接从中寻找，发现原来是\Encore\Admin\Admin静态变量 12345678910111213141516171819202122//因为是表单所以我们先进入 Encore\Admin\Form\Form 寻找Tool 发现renderDelete protected function renderDelete() &#123; $trans = [ 'delete_confirm' =&gt; trans('admin.delete_confirm'), 'confirm' =&gt; trans('admin.confirm'), 'cancel' =&gt; trans('admin.cancel'), 'delete' =&gt; trans('admin.delete'), ]; . . . Admin::script($script); return &lt;&lt;&lt;HTML&lt;div class="btn-group pull-right" style="margin-right: 5px"&gt; &lt;a href="javascript:void(0);" class="btn btn-sm btn-danger &#123;$class&#125;-delete" title="&#123;$trans['delete']&#125;"&gt; &lt;i class="fa fa-trash"&gt;&lt;/i&gt;&lt;span class="hidden-xs"&gt; &#123;$trans['delete']&#125;&lt;/span&gt; &lt;/a&gt;\&lt;/div&gt;HTML; &#125; 看到核心 Admin::script 这个原来是在Admin 下的 HasAssets， 123456789101112131415161718/** * @param string $script * @param bool $deferred * @return array|\Illuminate\Contracts\View\Factory|\Illuminate\View\View */ public static function script($script = '', $deferred = false)&#123; if (!empty($script)) &#123; if ($deferred) &#123; return self::$deferredScript = array_merge(self::$deferredScript, (array) $script); &#125; return self::$script = array_merge(self::$script, (array) $script); &#125; $script = array_unique(array_merge(static::$script, static::$deferredScript)); return view('admin::partials.script', compact('script'));&#125; 那么解决起来就狠方便了 直接在bootstrap中初始化一下这些静态变量即可 我觉得麻烦所以就直接写了一个clean，之前憨批的方法我也就换成更加粗暴的方式，最终还是清理掉Admin在容器中的实例 12345678910 \Encore\Admin\Admin::$script=[]; \Encore\Admin\Admin::$deferredScript=[]; \Encore\Admin\Admin::$headerJs = []; \Encore\Admin\Admin::$manifestData = []; \Encore\Admin\Admin::$extensions = [];... $app-&gt;forgetInstance(\Encore\Admin\Admin::class); Facade::clearResolvedInstance(\Encore\Admin\Admin::class); 由此，问题一和问题二已经基本解决，菜鸟也想学习大佬的操作，想要更加优雅一点 下面就是解决exit问题了，中间复杂心里斗争，最后只能采用抛出异常的方式 Pjax中的exit 在56行 Export中 这里就很多，我就不一一指出 12345678910111213141516171819202122232425262728293031323334 //导出操作 $res = Response::stream(function () &#123; $handle = fopen('php://output', 'w'); $titles = []; $this-&gt;chunk(function ($records) use ($handle, &amp;$titles) &#123; if (empty($titles)) &#123; $titles = $this-&gt;getHeaderRowFromRecords($records); // Add CSV headers fputcsv($handle, $titles); &#125; foreach ($records as $record) &#123; fputcsv($handle, $this-&gt;getFormattedRecord($record)); &#125; &#125;); // Close the output stream fclose($handle); &#125;, 200, $headers); swoole_exit($res);//Pjax 修改后 $next = function () use ($response) &#123; return $response; &#125;; swoole_exit((new static())-&gt;handle(Request::capture(), $next)); //swoole_exit神秘面纱if (!function_exists('swoole_exit'))&#123; function swoole_exit($response) &#123; throw new App\Exceptions\SwooleExitException($response); &#125; &#125; 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051 //修改Handler &lt;?phpnamespace App\Exceptions;use Exception;use Illuminate\Foundation\Exceptions\Handler as ExceptionHandler;use Illuminate\Routing\Router;use Illuminate\Support\Facades\Response;use Symfony\Component\HttpFoundation\Response as SymfonyResponse;class Handler extends ExceptionHandler\&#123; /** * A list of the exception types that are not reported.\ *\ * @var array */ protected $dontReport = [ SwooleExitException::class ]; /** * A list of the inputs that are never flashed for validation exceptions.\ *\ * @var array */ protected $dontFlash = [ 'password', 'password_confirmation', ]; /** * Report or log an exception@param \Exception $exception\ * @return void\ */ public function report(Exception $exception) &#123; parent::report($exception); &#125; /** * Render an exception into an HTTP response.\ *\ * @param \Illuminate\Http\Request $request * @param \Exception $exception * @return \Illuminate\Http\Response */ public function render($request, Exception $exception) &#123; //判断是否为我们的自定义异常 if ($exception instanceof SwooleExitException) &#123; //直接调用perpare return $exception-&gt;getResponse()-&gt;prepare($request); &#125; return parent::render($request, $exception); &#125;&#125; 12345678910111213141516171819&lt;?phpnamespace App\Exceptions;use Exception;use Throwable;class SwooleExitException extends Exception\&#123; protected $response; public function __construct($response,$message = "", $code = 0, Throwable $previous = null) &#123; $this-&gt;response = $response; parent::__construct($message, $code, $previous); &#125;//获取响应内容public function getResponse()&#123; return $this-&gt;response;&#125; 如果你直接把exit去掉，那么 导出csv 会提示你 oops … ob_end_clean() 这个报错 我们可以在Hhxsv5\LaravelS\Illuminate\Laravel中的 handleDynamic 加一个判断ob_get_length()也可以不加，因为后期解决exit退出问题，也就不会有这种报错 解决思路因为exit其实就是不执行后续的响应 ，所以我们想到异常就是执行到异常抛出之前，于是我们可以定义一种特定的异常，来提前结束，用来代替exit ，至于 swoole/laravels 为什么不能使用这些函数我就不在这赘述 使用异常，但是我们也得返回请求，但是我们的请求不能直接send掉，因为laravels需要使用swoole的方式返回，我们直接执行 send 是不起作用的，那我们就可以通过特定的异常返回我们所需要的响应， 123456789101112131415161718192021222324public static function toResponse($request, $response)\&#123; if ($response instanceof Responsable) &#123; $response = $response-&gt;toResponse($request); &#125; if ($response instanceof PsrResponseInterface) &#123; $response = (new HttpFoundationFactory)-&gt;createResponse($response); &#125; elseif ($response instanceof Model &amp;&amp; $response-&gt;wasRecentlyCreated) &#123; $response = new JsonResponse($response, 201); &#125; elseif (! $response instanceof SymfonyResponse &amp;&amp; ($response instanceof Arrayable || $response instanceof Jsonable || $response instanceof ArrayObject || $response instanceof JsonSerializable || is_array($response))) &#123; $response = new JsonResponse($response); &#125; elseif (! $response instanceof SymfonyResponse) &#123; $response = new Response($response); &#125; if ($response-&gt;getStatusCode() === Response::HTTP_NOT_MODIFIED) &#123; $response-&gt;setNotModified(); &#125; return $response-&gt;prepare($request);&#125; 替换Router::toResponse(); 为 $exception-&gt;prepare() 无需其他中间过程 1由于使用过程中发现toResponse()导出多次会发现异常问题，所以替换，具体原因还在查找中 感谢z-song提供的laravel-admin优质扩展 感谢hhxsv5提供的laravel-s优质扩展 具体分析请等下次更新，我们把laravels大致走一遍，学习一下 laravels可以获取到最终响应然后返回，目的就达到了]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>framework</tag>
        <tag>laravel</tag>
        <tag>laravels</tag>
        <tag>laravel-admin</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[关于]]></title>
    <url>%2F2019%2F09%2F22%2F%E5%85%B3%E4%BA%8E%2F</url>
    <content type="text"><![CDATA[简单介绍一下本站 网站简介 本网站用来记录生活,学习,技术,等等 作者QQ:1136589038]]></content>
  </entry>
  <entry>
    <title><![CDATA[Tp 3.2 运行分析 1 初步认识篇]]></title>
    <url>%2F2019%2F09%2F22%2FTp-3-2-%E8%BF%90%E8%A1%8C%E5%88%86%E6%9E%90%2F</url>
    <content type="text"><![CDATA[初步介绍thinkphp的运行模式以及基本流程 think 3.2 文件逐层进入让我们一起进入thinkphp的设计方式 看看3.2性能为什么那么强大[仅仅一部分] - 路由等非常迅速 - 但是遇到数据库操作[关联关系n+1问题] 有什么可取之处 又有什么需要避免的地方 优点： tp3.2与ssh非常相似 所以采用java的开发思路去开发tp是非常舒服的 还有诸多可以优化的地方 --&gt; 1.优化框架n+1问题 --&gt; 2.解决一些其他耗时性能问题 使得框架更有利于快速开发 本次实践 发现虽然很多轮子都需要手动找或者自己做 但是,解决了一些很久以前没使用过的底层问题 注重过程 缺点： 但是tp3.2 我认为性能并不是特别的强势 [很多地方仍然可以优化]入口文件 index.php 定义一些基础-&gt;引入引导文件 12345678// 开启调试模式 建议开发阶段开启 部署阶段注释或者设为falsedefine('APP_DEBUG',True);//默认模块define('BIND_MODULE','Home');//应用目录define('APP_PATH','./Application/');//引入核心文件require "./ThinkPHP/ThinkPHP.php"; 引导运行文件 ThinkPHP.php入口文件解析 1234567891011121314151617181920212223242526272829303132333435363738// 记录开始运行时间$GLOBALS['_beginTime'] = microtime(TRUE);if(!IS_CLI) &#123; // 当前文件名 if(!defined('_PHP_FILE_')) &#123; if(IS_CGI) &#123; //CGI/FASTCGI模式下 $_temp = explode('.php',$_SERVER['PHP_SELF']); define('_PHP_FILE_', rtrim(str_replace($_SERVER['HTTP_HOST'],'',$_temp[0].'.php'),'/')); &#125;else &#123; define('_PHP_FILE_', rtrim($_SERVER['SCRIPT_NAME'],'/')); &#125; &#125; if(!defined('__ROOT__')) &#123; $_root = rtrim(dirname(_PHP_FILE_),'/'); define('__ROOT__', (($_root=='/' || $_root=='\\')?'':$_root)); &#125;&#125;// 加载核心Think类 // CORE_PATH ==&gt; Library/Think/Think.vlass.phprequire CORE_PATH.'Think'.EXT;//开始引导运行Think\Think::start(); Think 核心类 Think.class.php 引导结构 性能缺点分析todo解耦合todo]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>thinkphp</tag>
        <tag>php</tag>
        <tag>framework</tag>
        <tag>mvc</tag>
      </tags>
  </entry>
</search>
